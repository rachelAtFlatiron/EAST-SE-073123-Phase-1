//✅ 1. refactor: event handler functions, render functions, testing functions

/* constants */
const bookList = document.querySelector("#book-list");
const toggleBookFormButton = document.querySelector("#toggle-form");
const bookForm = document.querySelector("#book-form");
const storeForm = document.querySelector("#store-form");
const toggleStoreFormButton = document.querySelector("#toggle-store-form");
const storeSelector = document.querySelector("#store-selector");
const url = "http://localhost:3000";
//✅ 3. store drop-down list
//✅ 3. store-form const

//✅ 2. include POST request on new book form submit
bookForm.addEventListener("submit", (e) => {
	e.preventDefault();
	const book = {
		title: e.target.title.value,
		author: e.target.author.value,
		price: e.target.price.value,
		reviews: [],
		inventory: e.target.inventory.value,
		imageUrl: e.target.imageUrl.value,
		//id: automatically generated by json-server
		//let json-server handle it because no two entries should have same id
	};
	//✅ 2a. create fetch request: pessimistic and optimistic approach
	//✅ 2c. use dev tools to simulate a slow connection (network) and add a loading class to li
	const li = renderBook(book);
	li.classList.add('loading')
	
	fetch(`${url}/books`, {
		method: "POST", //specify POST request
		headers: { "content-type": "application/json" }, //tell POST to expect data in JSON format
		body: JSON.stringify(book), //turn javascript object into JSON
	})
		.then((res) => res.json())
		.then((data) => {
			//pessimistic rendering: inside scope of fetch, relies on promise resolving properly
			li.classList.remove('loading')
			//renderBook(data);
		})
		.catch((err) => {
			li.remove()
			alert("something went wrong");
		});

	// postJSON(`${url}/books`, book)
	// 	.then((data) => data())
	// 	.catch((err) => alert("something went wrong"));

	//optimistic rendering: decoupled from fetch POST, does not rely on fetch POST to succeed
	//renderBook(book)
});



//✅ 3. implement store form and store dropdown
//✅ 3a. create eventListener for form
storeForm.addEventListener("submit", (e) => {
	e.preventDefault();
	let newStore = {
		location: e.target.location.value,
		name: e.target.name.value,
		number: e.target.number.value,
	};
	//✅ 3b. create POST request for new store
	fetch(`${url}/stores`, {
		method: 'POST',
		headers: {'content-type': 'application/json'},
		body: JSON.stringify(newStore)
	})
	.then(res => res.json())
	.then(data => {
		addSelectOptionForStore(data)
	})
	.catch(err => console.log(err))
	//✅ 2b. use boilerplate from request_helpers.js to execute POST request
	// postJSON(`${url}/stores`, newStore)
	// 	.then((data) => console.log(data))
	// 	.catch((err) => console.log("sorry something went worry"));
});

/* fetches and renders all books */
fetch(`${url}/books`)
	.then((res) => res.json())
	.then((books) => books.forEach((book) => renderBook(book)));
getJSON(`${url}/stores`).then((stores) => {
	renderStoreSelectionOptions(stores);
	renderHeader(stores[0]);
	renderFooter(stores[0]);
});

/* event listeners to toggle forms */
toggleBookFormButton.addEventListener("click", (e) => {
	toggleBookForm();
});
toggleStoreFormButton.addEventListener("click", (e) => {
	toggleStoreForm();
});

/* fills in form with data for testing */
fillStore(storeForm, {
	name: "BooksRUs",
	location: "LaLaLand",
	number: "555-555-5555",
});

fillBook(bookForm, {
	title: "Designing Data Intensive Applications",
	author: "Martin Kleppmann",
	price: 20,
	imageUrl: "https://m.media-amazon.com/images/I/91YfNb49PLL._SY522_.jpg",
	inventory: 11,
});

//////////////////////
// render functions //
//////////////////////

////////////////////////////////////////////////////////////////
// Event Listeners/Handlers (Behavior => Data => Display) //////
////////////////////////////////////////////////////////////////

///////////////////////////
// Testing functions //////
///////////////////////////
